@model ik.Models.Rapor

@{
    ViewBag.Title = "SaglikRaporEkle";
}

<h2>SaglikRaporEkle</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Rapor</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


        <div class="form-group">
            @Html.LabelFor(model => model.personelid, "personelid", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("personelid", (SelectList)ViewBag.personelListe, "Personel Seçiniz", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.personelid, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.raportip, "raportip", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("raportip", (SelectList)ViewBag.raportipListe, "Rapor Tipi", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.raportip, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.hastaliktip, "hastaliktip", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("hastaliktip", (SelectList)ViewBag.raporhastaliktipListe, "Hastalık Tipi", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.hastaliktip, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.baslangic, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.baslangic, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.baslangic, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bitis, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">@Html.EditorFor(model => model.bitis, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.bitis, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.aciklama, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.aciklama, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.aciklama, "", new { @class = "text-danger" })
        </div>
    </div>




        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section scripts{
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script type="text/javascript">
        $(function() {
            jQuery.validator.methods.date = function (value, element) {
                var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                if (isChrome) {
                    var d = new Date();
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                } else {
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                }
            };
        })
    </script>
    
}
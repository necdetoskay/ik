@model ik.Models.Personel

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Personel</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.adsoyad, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.adsoyad, new { htmlAttributes = new { @class = "form-control" } })<input id="pdksgetir" type="button" value="PDKS Kontrol" />
                @Html.ValidationMessageFor(model => model.adsoyad, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.birimid, "birimid", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("birimid", (SelectList)ViewBag.birimListe, "Birim Seçiniz", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.birimid, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.puantaj, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.puantaj)
                        @Html.ValidationMessageFor(model => model.puantaj, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>*@

        @*<div class="form-group">
                @Html.LabelFor(model => model.sira, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.sira, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.sira, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.sicilno, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.sicilno, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.sicilno, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.tcno, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.tcno, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.tcno, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.pdksid, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.pdksid, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.pdksid, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.giristarihi, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.giristarihi, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.giristarihi, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="form-group">
                @Html.LabelFor(model => model.kidemtarihi, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.kidemtarihi, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.kidemtarihi, "", new { @class = "text-danger" })
                </div>
            </div>*@
     
        <div class="form-group">
                @Html.LabelFor(model => model.mikroid, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.mikroid, new { htmlAttributes = new { @class = "form-control" } })   <input id="mikrogetir" type="button" value="Mikro Kontrol" />
                    @Html.ValidationMessageFor(model => model.mikroid, "", new { @class = "text-danger" })
                </div>
            </div>



        <div class="form-group">
                @Html.LabelFor(model => model.dogumtarihi, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.dogumtarihi, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.dogumtarihi, "", new { @class = "text-danger" })
                </div>
            </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Kaydet" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
@section scripts{
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    <script src="~/Scripts/ptakip.js"></script>
    <script type="text/javascript">
        $(function() {
            jQuery.validator.methods.date = function(value, element) {
                var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                if (isChrome) {
                    var d = new Date();
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                } else {
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                }
            };
            $('#mikrogetir').on('click', function() {
                var adsoyad = $('#adsoyad').val();
                var sicil = $('#sicilno').val();
                if (adsoyad == '' || sicil == '') {
                    return;
                }
                $.ajax({
                    url: '@Url.Action("MikroBilgi","Mikro")',
                    type: 'post',
                    data: {
                        sicilno:sicil
                    },
                    success: function (data) {
                        $('#mikroid').val(data.MikroID);
                        $('#dogumtarihi').val(data.DOB.replace(/\./g, "/"));
                        console.log(data);
                    }
            });
        });


        $('#pdksgetir').on('click', function() {
            var val = $('#adsoyad').val();
            if (val == '') {
                console.log('ad soyad boş');
                return;
            }
            $.ajax({
                url: '@Url.Action("PersonelBilgi", "PDKS")',
                method: 'get',
                data: {
                    'adsoyad': val
                },
                success: function(data) {
                    console.log(data);
                    $('#pdksid').val(data.id);
                    var giris = data.giristarihi.Value;
                    $('#giristarihi').val(giris.toDDMMYYY());
                    $('#sicilno').val(data.kartno);
                }

            });

        });
        })
    </script>
}
selectlist personel kullanımı
<script src="~/Scripts/Admin.js"></script>
 function sonuc(result) {
            $('#evrakliste').html(result);
        }


 $('#selectlist').MakeSelectList({
                loadimgurl: '@Url.Content("~/Content/Loading_icon.gif")',
                listurl: '@Url.Action("_SelectList", "Personel", new {Area = ""})',
                targetdiv: 'evrakliste',
                callafterchange: '@Url.Action("EvraklariHazirla")',
                change: function(result) {
                    sonuc(result);
                }
            });

$('#openBtn').click(function(){  
  	$('.modal-body').load('/render/62805',function(result){
	    $('#myModal').modal({show:true});
	});  	
});
<a href="#" class="btn" id="openBtn">Open modal</a>

<div id="myModal" class="modal hide fade" tabindex="-1" role="dialog">
	<div class="modal-header">
		<button type="button" class="close" data-dismiss="modal">×</button>
			<h3>Modal header</h3>
	</div>
	<div class="modal-body">
		<p>My modal content here…</p>
	</div>
	<div class="modal-footer">
		<button class="btn" data-dismiss="modal">Close</button>
	</div>
</div>s
















Z:\Source\Repos\proje\ik\ik\Scripts\ik.js
  $('.table').KayıtAdet(); //tablodaki kayıt sayısını gösterir





var dialog = bootbox.dialog({
    title: 'A custom dialog with buttons and callbacks',
    message: "<p>This dialog has buttons. Each button has it's own callback function.</p>",
    size: 'large',
    buttons: {
        cancel: {
            label: "I'm a cancel button!",
            className: 'btn-danger',
            callback: function(){
                Example.show('Custom cancel clicked');
            }
        },
        noclose: {
            label: "I don't close the modal!",
            className: 'btn-warning',
            callback: function(){
                Example.show('Custom button clicked');
                return false;
            }
        },
        ok: {
            label: "I'm an OK button!",
            className: 'btn-info',
            callback: function(){
                Example.show('Custom OK clicked');
            }
        }
    }
});











var ID = function () {
  return '_' + Math.random().toString(36).substr(2, 9);
};

/////////////////////////////tree table
<tr data-tt-id="1">
        <td>Parent</td>
        <td><input type="button" onclick="alert('bas 1');" value="Bas" /></td>
    </tr>
    <tr data-tt-id="2" data-tt-parent-id="1">
        <td>Child</td>
        <td><input type="button" onclick="alert('bas 2');" value="Bas" /></td>
    </tr>


 BootstrapDialog.confirm({
                    title: 'Avans Kayıt',
                    message: 'Avans Kaydedilsin mi?',
                    type: BootstrapDialog.TYPE_WARNING, // <-- Default value is BootstrapDialog.TYPE_PRIMARY
                    closable: true, // <-- Default value is false
                    draggable: true, // <-- Default value is false
                    btnCancelLabel: 'İptal', // <-- Default value is 'Cancel',
                    btnOKLabel: 'Kaydet', // <-- Default value is 'OK',
                    btnOKClass: 'btn-info', // <-- If you didn't specify it, dialog type will be used,
                    callback: function (result) {
                        // result will be true if button was click, while it will be false if users close the dialog directly.
                        if (result) {
                            avanskaydet();
                        } 
                    }
                });
///////////////////////////////////////////////////////////////////////////////
 $('#rutinekle').MakeDialogForm({
                id: 'btnekle',//butonid
                text: 'Rutin Ekle',
                url: '@Url.Action("Create","Takip")' ,
                title: '',
                updateurl: '@Url.Action("RutinOzet","Takip")' + '/?limit=10',
                bclass: 'btn btn-info',
                targetid: 'rutindiv',
                width: "500",
                height: "400",
                complete: function () {
                    alert("sonunda tamamlandı");
                }
            });






$( "#feeds" ).load( "feeds.php", { limit: 25 }, function() {
  alert( "The last 25 entries in the feed have been loaded" );
});



    @Html.ActionLink(" ", "Edit", new { id=item.id} ,new { @class= "glyphicon glyphicon-pencil",title="Düzenle" }) |




 $('#yarimekle').MakeDialogForm({
                    id: 'btnyarimekle',
                    text: 'Yarım İzin Ekle',
                    url: '@Url.Action("_YarimIzinEkle")' + '/?id=' + id + '&izinid=' + -1,
                    title: 'yarım izin Title',
                    updateurl: '@Url.Action("_PersonelYarimİzinListele")' + '/?id=' + id,
                    bclass: 'btn btn-info',
                    targetid: 'yarimtablo',
                    width: "500",
                    height: "400",
                    complete: function () {
                        alert("sonunda tamamlandı");
                    }
                });





  /////////////////////////////////////NOTİFY KULLANIMI
  $.notify({
     title: '<strong>' + result.AdSoyad + ':</strong>',
     message: '' + result.EvrakAd + ' Evrak Kaydı Güncellendi.'
     }, {type: 'success'});
///////////////////////////////////////////////

  
  jQuery.validator.methods.date = function(value, element) {
                var isChrome = /Chrome/.test(navigator.userAgent) && /Google Inc/.test(navigator.vendor);
                if (isChrome) {
                    var d = new Date();
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(d.toLocaleDateString(value)));
                } else {
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                }
            };



mikroya girilen fakat ik ve pdks ye girilmeyen izinler izin durumunda listelendi. ik ve pdksye kaydetme işlemleri kaldı


   var BirimListe = db.birims.Select(c => new SelectListItem()
            {
                Text = c.birimad,
                Value = c.id.ToString()
            });
 $.each(data.BirimListe, function(i, brm) {
 birim.append('<option value="' + brm.Value + '">' + brm.Text + '</option>');
 });

 *************************************liste oluşturma
 <ul class="list-group">
  <li class="list-group-item list-group-item-success">First item</li>
  <li class="list-group-item list-group-item-info">Second item</li>
  <li class="list-group-item list-group-item-warning">Third item</li>
  <li class="list-group-item list-group-item-danger">Fourth item</li>
</ul>


http://bootstrap-confirmation.js.org/#usage


http://bootstrap-notify.remabledesigns.com/

$.notify({
	title: '<strong>Heads up!</strong>',
	message: 'You can use any of bootstraps other alert styles as well by default.'
},{
	type: 'danger'
});


var attr = $(this).attr('name');
if (typeof attr !== typeof undefined && attr !== false) {
    // ...
}


$('<form><input type="text" style="z-index:10000" name="name"><br></form>').dialog({
  modal: true,
  buttons: {
    'OK': function () {
      var name = $('input[name="name"]').val();
      storeData(name);
      $(this).dialog('close');
      $(this).remove();
    },
    'Cancel': function () {
      $(this).dialog('close');
      $(this).remove();
    }
  }
});






<button onclick="myFunction()">Try it</button>
<p id="demo"></p>
<script>
function myFunction() {
    var person = prompt("Please enter your name", "Harry Potter");
    if (person != null) {
        document.getElementById("demo").innerHTML =
        "Hello " + person + "! How are you today?";
    }
}
</script>


var txt;
var r = confirm("Press a button!");
if (r == true) {
    txt = "You pressed OK!";
} else {
    txt = "You pressed Cancel!";
}



{"_id":745028,"name":"Izmit","country":"TR","coord":{"lon":29.916941,"lat":40.766941}}


http://api.openweathermap.org/data/2.5/forecast/city?id=745028&APPID=8f7a341898fa36cb468cf9ddd7f1ada7


(function($) {

    $.fn.helloWorld = function( options ) {

        // Establish our default settings
        var settings = $.extend({
            text         : 'Hello, World!',
            color        : null,
            fontStyle    : null
        }, options);

		return this.each( function() {
			$(this).text( settings.text );

			if ( settings.color ) {
				$(this).css( 'color', settings.color );
			}

			if ( settings.fontStyle ) {
				$(this).css( 'font-style', settings.fontStyle );
			}
		});

    }

}(jQuery));


SETTİNG olarak fonksiyon atama
var settings = $.extend({
    text         : 'Hello, World!',
    color        : null,
    fontStyle    : null,
    complete     : null
}, options);

return this.each( function() {
    // Our plugin so far

    if ( $.isFunction( settings.complete ) ) {
        settings.complete.call( this );
    }
});


$('h2').helloWorld({
    text        : 'Salut, le monde!',
    color       : '#005dff',
    fontStyle   : 'italic',
    complete    : function() { alert( 'Done!' ) }
});

//(result);
                //var data=result.Data;
                //drawTable(data);
                //icratutar = result.Message.tutar;
                //icrakalan = icratutar - odenen;
                //$('#icraodenen').text(odenen.toFixed(0).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,"));
                //$('#icratutar').text(icratutar.toFixed(0).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,"));
                //$('#icrakalan').text(icrakalan.toFixed(0).replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,"));
                //$('#adsoyad').text(result.Message.adsoyad);
                //$('#dosyano').text(result.Message.dosyano);
                //console.log(result.Message);
                //$('#odenenler').TableEkle({
                //    Sutunlar:["tarih","tutar","aciklama"],
                //    Data:result.Data
                //});

                //var data=JSON.stringify(result.Data[0]);
                ////console.log(data);
                //var d = JSON.parse(data);
                //for (var key in d )
                //{
                //    //console.log(key + ' : ' + data[key]);
                //    console.log(key + ' --> ' + d[key]);
                //}
                //console.log(data);
                //$.each($.parseJSON(data), function(k, v) {

                //    for (var key in v)
                //    {
                //        console.log(key + ' --> ' + v[key]);

                //    }
                //    //return;
                //});

                //}





REMOTE VALİDATİON ****************************************************************************************************
	metadata
     [Remote("AdSoyadKontrol", "Personel")]

	 controller
	  public JsonResult AdSoyadKontrol(string adsoyad)
        {

            if (db.Personels.SingleOrDefault(c => c.adsoyad == adsoyad) == null)
                return Json(true, JsonRequestBehavior.AllowGet);

            string suggestedUID = String.Format(CultureInfo.InvariantCulture,
               "{0} Kullanıcısı zaten kayıtlı.", adsoyad);
            return Json(suggestedUID, JsonRequestBehavior.AllowGet);
        }
***********************************************************************************************************************

YES NO DROPDOWNLİST YAPIMI*****************************************************************************************
Code to setup DropDownList from Controller
private void DropDownReBind()
{
    List<SelectListItem> SelYN = new List<SelectListItem>();

    SelYN.Add(new SelectListItem
    {
        Text = "Yes",
        Value = "1"
    });
    SelYN.Add(new SelectListItem
    {
        Text = "No",
        Value = "0"
    });

    ViewData["selYN"] = SelYN;
}

 @Html.DropDownListFor(model => model.Annonymous, (IEnumerable<SelectListItem>)ViewData["selYN"], "-- Please Select --")
 **************************************************************************************************************************



 BootstrapDialog.confirm('Hi Apple, are you sure?', function(result){
            if(result) {
                alert('Yup.');
            }else {
                alert('Nope.');
            }
        });


BootstrapDialog.confirm({
            title: 'WARNING',
            message: 'Warning! Drop your banana?',
            type: BootstrapDialog.TYPE_WARNING, // <-- Default value is BootstrapDialog.TYPE_PRIMARY
            closable: true, // <-- Default value is false
            draggable: true, // <-- Default value is false
            btnCancelLabel: 'Do not drop it!', // <-- Default value is 'Cancel',
            btnOKLabel: 'Drop it!', // <-- Default value is 'OK',
            btnOKClass: 'btn-warning', // <-- If you didn't specify it, dialog type will be used,
            callback: function(result) {
                // result will be true if button was click, while it will be false if users close the dialog directly.
                if(result) {
                    alert('Yup.');
                }else {
                    alert('Nope.');
                }
            }
        });
////////////////////////////////////////////////////////////tab panel

<div class="col-md-12">
    <ul class="nav nav-tabs">
        <li class="active"><a data-toggle="tab" href="#izin">Yıllık İzinler</a></li>
        <li><a data-toggle="tab" href="#yarimizin">Yarım Gün İzinler</a></li>      
    </ul>
</div>





<div class="col-lg-12">
    <div class="tab-content">
        <div id="izin" class="tab-pane fade in active">
            <div class="content"> </div>
        </div>
		<div id="yarimizin" class="tab-pane fade in">
		   <div class="content"> </div>
        </div>
	</div>
</div>



///////////////////////////////////////////////////////////////////
<div class="form-row">
    <div class="form-group col-md-6">
        <label for="inputCity">City</label>
        <input type="text" class="form-control" id="inputCity">
    </div>
    <div class="form-group col-md-4">
        <label for="inputState">State</label>
        <select id="inputState" class="form-control">
            <option selected>Choose...</option>
            <option>...</option>
        </select>
    </div>
    <div class="form-group col-md-2">
        <label for="inputZip">Zip</label>
        <input type="text" class="form-control" id="inputZip">
    </div>
</div>

///////////////////////////////////////////
input bootstrap dialog
//////////////////////////////////////
BootstrapDialog.show({
                title: 'Yeni Görev Ekle',
                message: 'Görev Adı Giriniz: <input id="ad" type="text" class="form-control">',
                buttons: [
                    {
                        label: 'İptal',
                        action: function (dialogRef) {
                            dialogRef.close();
                        }
                    },
                    {
                        label: 'Kaydet',
                        action: function (dialogRef) {
                            $.ajax({
                                url: '@Url.Action("_GorevEkle")',
                                type: 'POST',
                                data: {
                                    ad: $('#ad').val()
                                },
                                success: function (result) {
                                    if (result.Success === false) return;
                                    var gorevler = $('#gorevID');
                                    gorevler.empty();
                                    $.each(result.Data, function (i, item) {
                                        gorevler.append('<option Value="' + item.Value + '" >' + item.Text + '</option>');
                                    });
                                    gorevler.val(result.Selected);
                                    dialogRef.close();
                                }
                            });
                        }
                    }
                ]
            });




			byte[] key = new byte[8] { 1, 2, 3, 4, 5, 6, 7, 8 };
            byte[] iv = new byte[8] { 1, 2, 3, 4, 5, 6, 7, 8 };
            string result = null;
      
            SymmetricAlgorithm algorithm = DES.Create();
            ICryptoTransform transform = algorithm.CreateEncryptor(key, iv);
            byte[] inputbuffer = Encoding.Unicode.GetBytes("string");
            byte[] outputBuffer = transform.TransformFinalBlock(inputbuffer, 0, inputbuffer.Length);
            result= Convert.ToBase64String(outputBuffer);


            algorithm = DES.Create();
            transform = algorithm.CreateDecryptor(key, iv);
            inputbuffer = Convert.FromBase64String(result);
            outputBuffer = transform.TransformFinalBlock(inputbuffer, 0, inputbuffer.Length);
            result= Encoding.Unicode.GetString(outputBuffer);


